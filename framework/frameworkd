#!/usr/bin/env python
"""
The Open Device Daemon - Python Implementation

(C) 2008-2009 Michael 'Mickey' Lauer <mlauer@vanille-media.de>
(C) 2008 Openmoko, Inc.

GPLv2 or later
"""

__version__ = "1.3.0"

import sys, os
from optparse import OptionParser

#----------------------------------------------------------------------------#
class TheOptionParser( OptionParser ):
#----------------------------------------------------------------------------#
    def __init__( self ):
        OptionParser.__init__( self )
        self.set_defaults( overrides=[] )
        self.add_option( "-o", "--override",
            dest = "overrides",
            help = "override configuration",
            metavar = "SECTION.KEY=VALUE",
            action = "append"
        )
        self.add_option( "-s", "--subsystems",
            metavar = "system1,system2,system3,...",
            dest = "subsystems",
            default = "",
            help = "launch following subsystems (default=all)",
            action = "store",
        )
        self.add_option( "-d", "--daemonize",
            dest = "daemonize",
            help = "launch as daemon",
            action = "store_true",
        )
        self.add_option( "-p", "--profile",
            metavar = "<filename>",
            dest = "profile",
            help = "launch in profile mode (needs python-profile)",
            action = "store",
        )
        self.add_option( "-l", "--loophole",
            dest = "loophole",
            help = "create loophole listening on port 8822 (needs python-netserver)",
            action = "store_true",
        )

#----------------------------------------------------------------------------#
if __name__ == "__main__":
#----------------------------------------------------------------------------#
    options = TheOptionParser()
    options.parse_args( sys.argv )

    if options.values.profile:
        try:
            import cProfile
        except ImportError:
            print "Can't import cProfile; python-profile not installed? Can't profile."
            sys.exit( -1 )
        else:
            print "WARNING: profiling mode. profiling to %s" % options.values.profile

    try:
        from framework import controller
    except ImportError:
        sys.path.append( os.path.dirname( os.path.abspath( os.path.curdir ) ) )
        from framework import controller
    c = controller.Controller( "%s/subsystems" % os.path.dirname( controller.__file__ ), options )

    if options.values.loophole:
        from patterns import loophole
        print "LoopHole listening on port 8822"
        l = loophole.LoopHole( dict( controller=c ) )

    try:
        if options.values.profile:
            p = cProfile.Profile()
            p.run( "c.launch()" )
        else:
            c.launch()
    except KeyboardInterrupt:
        print >>sys.stderr, "ctrl-c: exiting."
        c.shutdown()
        del c

    if options.values.profile:
        import lsprofcalltree
        k = lsprofcalltree.KCacheGrind(p)
        data = open( options.values.profile, "w" )
        k.output( data )
        data.close()
