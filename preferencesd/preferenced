#!/usr/bin/env python

"""
The Preference Deamon - Python Implementation

(C) 2008 Guillaume 'Charlie' Chereau
(C) 2008 Openmoko, Inc.
GPLv2 or later
"""

import yaml
import os

import dbus
import dbus.service
import dbus.mainloop.glib
import gobject

class Schema(dict):
    """A Schema is used to define the properties of parameters
    
        A Schema is always associated with a file in the yaml format.
        A example schema file looks like this :
        
        vibration:              # The name of the parameter
            type: bool          # The type
            default: yes        # default value
            profilable: yes     # set to yes if the parameter depends of the profile

        ring-volume:
            type: int
            default: 10
            profilable: yes
        
    """
    
    # This map the type string to the actual python types
    str_to_types = {'int' : int, 'bool' : bool, 'str' : str, 'var': object}
    types_to_str = dict( (v,k) for k,v in str_to_types.iteritems() )
    
    def __init__(self, file):
        """Create a new schema from a file"""
        self.file = file
        
        schema = open(file).read()
        schema = yaml.load(schema)
        
        for key,v in schema.iteritems():
            type = Schema.str_to_types[v.get('type', 'var')]
            default = v.get('default', None)
            profilable = v.get('profilable', False)
            self[key] = Schema.Parameter(key, type, default, profilable)
            
    class Parameter(object):
        """Represents a parameter description in a schema file"""
        def __init__(self, key, type, default = None, profilable = False):
            self.key = key
            self.type = type
            self.default = default
            self.profilable = profilable
        def __repr__(self):
            return repr((self.key, self.type, self.default, self.profilable))

        
class Configuration(dict):
    """Configuration dict associated to a conf file
    
        A Configuration is a map of key -> values. It can be synchronized with a conf file in the yaml format.
        A typical conf file looks like this :
        
        vibration: Yes
        ring-volume: 9
    
    """
    def __init__(self, file):
        self.file = file
        conf = open(file).read()
        self.update(yaml.load(conf))
        
    def flush(self):
        pass
        
class ConfigurationManager(dbus.service.Object):
    """This is the class for the main object from wich we access the services configuration
    
        @param schema_dir   The directory containing the schema files
        @param conf_dir     The directory containing the configuration files
    """
    def __init__(self, schema_dir = './schema', conf_dir = './conf'):
        super(ConfigurationManager, self).__init__(dbus.SessionBus(), '/Preferences')
        self.schema_dir = schema_dir
        self.conf_dir = conf_dir
        self.profile = 'default'
        self.services = {}
        
    @dbus.service.method("org.freesmartphone.Preferences", in_signature='s', out_signature='o')
    def GetService(self, name):
        if name in self.services:
            return self.services[name]
        ret = Service(self, str(name))
        self.services[name] = ret
        return ret
    
    @dbus.service.method("org.freesmartphone.Preferences", in_signature='s', out_signature='')
    def SetProfile(self, profile):
        self.profile = str(profile)
        for s in self.services.itervalues():
            s.on_profile_changed(profile)
    
    @dbus.service.method("org.freesmartphone.Preferences", in_signature='', out_signature='as')    
    def GetServicesName(self):
        """Return a list off all the available services names"""
        # We need to see in the conf directory what are the files
        ret = []
        list = os.listdir(self.conf_dir)
        for file_name in list:
            ret.append(file_name)
        return ret
        
    @dbus.service.method("org.freesmartphone.Preferences", in_signature='', out_signature='as')    
    def GetProfiles(self):
        """Return a list off all the available services names"""
        # We need to see in the conf directory what are the files
        ret = []
        list = os.listdir(self.conf_dir)
        for file_name in list:
            ret.append(file_name)
        return ret

    
class Service(dbus.service.Object):
    """ Class that deals with configuration value of a given service
    
        The service can set and get the value of parameters.
        
        The services are used to group related parameters together.
        Basically, every application using the config server should use its own service name.
         
        For each service we need a schema file describing the parameters the service provides.
        
        The configurations values are stored in yaml file.
        Each conf file contains all the parameters for a given service in a given context.
        The conf files are organised with the following file hierachy : 
        conf/$(service)/$(profile).yaml
        
        All the parameters that are independant of the profile are stored in the 'default' profile file.
        
        When we set or get parameters, the service server takes into account the current profile,
        so the applications using the service don't need to know about the current profile.
    """
    def __init__(self, manager, name):
        super(Service, self).__init__(dbus.SessionBus(), '/Preferences/%s' % name)
        self.manager = manager
        self.name = name
        self.schema = Schema('%s/%s.yaml' % (self.manager.schema_dir, name))
        self.confs = {}     # all the conf files
        
    def get_conf(self, profile):
        """Return the conf instance for a given profile"""
        if profile in self.confs:
            return self.confs[profile]
        conf = Configuration('%s/%s/%s.yaml' % (self.manager.conf_dir, self.name, profile))
        self.confs[profile] = conf
        return conf
        
    @dbus.service.method('org.freesmartphone.Preferences.Service', in_signature='', out_signature='as')
    def GetKeys(self):
        return self.schema.keys()
    
    @dbus.service.method('org.freesmartphone.Preferences.Service', in_signature='s', out_signature='v')
    def GetValue(self, key):
        """get a parameter value"""
        key = str(key)
        parameter = self.schema[key]
        profile = self.manager.profile if parameter.profilable else 'default'
        try:
            conf = self.get_conf(profile)
            ret = conf[key]
        except:
            ret = parameter.default
        # print 'get %s = %s' % (key, ret)
        return ret
    
    @dbus.service.method('org.freesmartphone.Preferences.Service', in_signature='sv', out_signature='')
    def SetValue(self, key, value):
        """set a parameter value for a service, in the current profile"""
        key = str(key)
        
        # print 'set %s to %s' % (key, value)
        
        parameter = self.schema[key]
        profile = self.manager.profile if parameter.profilable else 'default'
        try:
            value = parameter.type(value)
        except:
            raise TypeError, "expected %s, got %s" % (parameter.type, type(value))
        conf = self.get_conf(profile)
        conf[key] = value
    
        self.Notify(key, value) # We don't forget to notify the listeners
        
    @dbus.service.method('org.freesmartphone.Preferences.Service', in_signature='s', out_signature='b')
    def IsProfilable(self, key):
        """Return true if a parameter depends on the current profile"""
        key = str(key)
        parameter = self.schema[key]
        return parameter.profilable
        
    @dbus.service.method('org.freesmartphone.Preferences.Service', in_signature='s', out_signature='s')
    def GetType(self, key):
        """Return a string representing the type of the parameter"""
        key = str(key)
        parameter = self.schema[key]
        return Schema.types_to_str[parameter.type]
        
    @dbus.service.signal('org.freesmartphone.Preferences.Service', signature='sv')
    def Notify(self, key, value):
        """signal used to notify a parameter change"""
        pass
        
    def on_profile_changed(self, profile):
        """called everytime we the global profile is changed"""
        for key in self.GetKeys():
            if self.IsProfilable(key):
                self.Notify(key, self.GetValue(key))
        
        

if __name__ == '__main__':
    import sys
    
    if len(sys.argv) < 2:
        print 'you must give a path to the configuration root directory'
        sys.exit(-1)
        
    root_dir = sys.argv[1]
    schema_dir = '%s/schema' % root_dir
    conf_dir = '%s/conf' % root_dir

    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

    session_bus = dbus.SessionBus()
    name = dbus.service.BusName('org.freesmartphone.preferencesd', session_bus)
    conf_manager = ConfigurationManager(schema_dir, conf_dir)

    mainloop = gobject.MainLoop()
    print "Running conf service."
    mainloop.run()
    
    """
    example usage call :
    
    dbus-send --print-reply --dest=org.freesmartphone.preferencesd /Preferences org.freedesktop.DBus.Introspectable.Introspect
    dbus-send --print-reply --dest=org.freesmartphone.preferencesd /Preferences org.freesmartphone.Preferences.GetService string:phone
    dbus-send --print-reply --dest=org.freesmartphone.preferencesd /Preferences/phone org.freesmartphone.Preferences.Service.GetKeys

    """
