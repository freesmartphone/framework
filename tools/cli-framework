#!/usr/bin/env python
# -*- coding: UTF-8 -*-
"""
Interactive console for the freesmartphone.org framework

(C) 2008 Michael 'Mickey' Lauer <mlauer@vanille-media.de>
(C) 2008 Jan 'Shoragan' LÃ¼bbe <jluebbe@lasnet.de>
(C) 2008 Openmoko, Inc.

GPLv2 or later
"""

__version__ = "0.9.1"

import os, sys, code, pprint
import dbus.service
import dbus.mainloop.glib
import dbus
from syslog import syslog, LOG_ERR, LOG_WARNING, LOG_INFO, LOG_DEBUG
import dbus, sys, atexit
from gobject import MainLoop

pp = pprint.PrettyPrinter( indent=4 )


#----------------------------------------------------------------------------#
def dbus_to_python(v):
#----------------------------------------------------------------------------#
    if isinstance(v, dbus.Int32):
        return int(v)
    elif isinstance(v, dbus.String):
        return str(v)
    elif isinstance(v, dbus.Dictionary):
        return dict( (dbus_to_python(k), dbus_to_python(v)) for k,v in v.iteritems() )
    elif isinstance(v, dbus.Array):
        return [dbus_to_python(x) for x in v]
    elif isinstance(v, dbus.Struct):
        return tuple(dbus_to_python(x) for x in v)
    else:
        return v
#        raise TypeError("Can't convert type %s to python object" % type(v))

#----------------------------------------------------------------------------#
def prettyPrint( expression ):
#----------------------------------------------------------------------------#
    if expression is not None:
        pp.pprint( dbus_to_python(expression) )

#----------------------------------------------------------------------------#
def handler( *args, **kwargs ):
#----------------------------------------------------------------------------#
    if kwargs["path"].startswith( "/org/freesmartphone" ):
        print "[SIGNAL]   %s.%s    from " % ( kwargs["interface"], kwargs["member"] ),
        print "%s via %s" % ( kwargs["path"], kwargs["sender"] )
        for arg in args[:-1]:
            print "%s, " % arg,
        print "%s" % args[-1]
        print ">>> ",
        sys.stdout.flush()

#----------------------------------------------------------------------------#
def getObject( busname, objectpath ):
#----------------------------------------------------------------------------#
    return bus.get_object( busname, objectpath, follow_name_owner_changes=True )

#----------------------------------------------------------------------------#
def getInterface( busname, objectpath, interface ):
#----------------------------------------------------------------------------#
    proxy = getObject( busname, objectpath )
    return dbus.Interface( proxy, interface)

#----------------------------------------------------------------------------#
def getObjectsForInterface( interface ):
#----------------------------------------------------------------------------#
    paths = framework.ListObjectsByInterface( interface )
    result = {}
    for path in paths:
        result[str(path)] = getInterface( "org.freesmartphone.frameworkd", path, interface )
    return result

dbus.mainloop.glib.DBusGMainLoop( set_as_default=True )
mainloop = MainLoop()
bus = dbus.SystemBus()

# FIXME use introspection

# framework object
framework = getObject( "org.freesmartphone.frameworkd", "/org/freesmartphone/Framework" )

# ogsmd device object
gsm = getObject( "org.freesmartphone.ogsmd", "/org/freesmartphone/GSM/Device" )

# ogps device object
gps = getObject( "org.freesmartphone.ogpsd", "/org/freedesktop/Gypsy" )

# usage device object
usage = getObject( "org.freesmartphone.ousaged", "/org/freesmartphone/Usage" )

# framework
frameworkiface = getInterface( \
    "org.freesmartphone.frameworkd",
    "/org/freesmartphone/Framework",
    "org.freesmartphone.Framework" )

# ogsmd server
hz = getInterface( \
    "org.freesmartphone.ogsmd",
    "/org/freesmartphone/GSM/Server",
    "org.freesmartphone.GSM.HZ" )

# odeviced objects
devaudio = getInterface( \
    "org.freesmartphone.odeviced",
    "/org/freesmartphone/Device/Audio",
    "org.freesmartphone.Device.Audio" \
    )

devidle = getInterface( \
    "org.freesmartphone.odeviced",
    "/org/freesmartphone/Device/IdleNotifier/0",
    "org.freesmartphone.Device.IdleNotifier" \
    )

display = getObjectsForInterface( "org.freesmartphone.Device.Display" ).values()[0]
bat = getObjectsForInterface( "org.freesmartphone.Device.PowerSupply" ).values()[0]
leds = getObjectsForInterface( "org.freesmartphone.Device.LED" ).values()

# ogsmd
gsmdevice = getInterface( \
    "org.freesmartphone.ogsmd",
    "/org/freesmartphone/GSM/Device",
    "org.freesmartphone.GSM.Device" )
gsmsim = getInterface( \
    "org.freesmartphone.ogsmd",
    "/org/freesmartphone/GSM/Device",
    "org.freesmartphone.GSM.SIM" )
gsmsms = getInterface( \
    "org.freesmartphone.ogsmd",
    "/org/freesmartphone/GSM/Device",
    "org.freesmartphone.GSM.SMS" )
gsmnetwork = getInterface( \
    "org.freesmartphone.ogsmd",
    "/org/freesmartphone/GSM/Device",
    "org.freesmartphone.GSM.Network" )
gsmcall = getInterface( \
    "org.freesmartphone.ogsmd",
    "/org/freesmartphone/GSM/Device",
    "org.freesmartphone.GSM.Call" )
gsmpdp = getInterface( \
    "org.freesmartphone.ogsmd",
    "/org/freesmartphone/GSM/Device",
    "org.freesmartphone.GSM.PDP" )
gsmtest = getInterface( \
    "org.freesmartphone.ogsmd",
    "/org/freesmartphone/GSM/Device",
    "org.freesmartphone.GSM.Test" )
gsmdebug = getInterface( \
    "org.freesmartphone.ogsmd",
    "/org/freesmartphone/GSM/Device",
    "org.freesmartphone.GSM.Debug" )

# ogps
gpsaccuracy = getInterface( \
    "org.freesmartphone.ogpsd",
    "/org/freedesktop/Gypsy",
    "org.freedesktop.Gypsy.Accuracy" )

gpsposition = getInterface( \
    "org.freesmartphone.ogpsd",
    "/org/freedesktop/Gypsy",
    "org.freedesktop.Gypsy.Position" )

gpssatellite = getInterface( \
    "org.freesmartphone.ogpsd",
    "/org/freedesktop/Gypsy",
    "org.freedesktop.Gypsy.Satellite" )

gpstime = getInterface( \
    "org.freesmartphone.ogpsd",
    "/org/freedesktop/Gypsy",
    "org.freedesktop.Gypsy.Time" )

ubxdebug = getInterface( \
    "org.freesmartphone.ogpsd",
    "/org/freedesktop/Gypsy",
    "org.freesmartphone.GPS.UBX" )

# usage
usageiface = getInterface( \
    "org.freesmartphone.ousaged",
    "/org/freesmartphone/Usage",
    "org.freesmartphone.Usage" )

# preferences
preferences = getInterface( \
    "org.freesmartphone.opreferencesd",
    "/org/freesmartphone/Preferences",
    "org.freesmartphone.Preferences" )

# events
events = getInterface( \
    "org.freesmartphone.oeventsd",
    "/org/freesmartphone/Events",
    "org.freesmartphone.Events" )

bus.add_signal_receiver( handler, None, None, None, None,
    sender_keyword = "sender",
    destination_keyword = "destination",
    interface_keyword = "interface",
    member_keyword = "member",
    path_keyword = "path" )

import rlcompleter, readline, atexit
readline.parse_and_bind( "tab: complete" )
try:
    readline.read_history_file( os.path.expanduser( "~/.framework-history" ) )
except IOError:
    pass
atexit.register( readline.write_history_file, os.path.expanduser( "~/.framework-history" ) )

def runmainloop():
    try:
        mainloop.run()
    except KeyboardInterrupt:
        mainloop.quit()
        sys.exit( 0 )

sys.displayhook = prettyPrint
console = code.InteractiveConsole( locals() )
try:
    console.interact( "freesmartphone.org interactive command line" )
except KeyboardInterrupt:
    sys.exit( 0 )
